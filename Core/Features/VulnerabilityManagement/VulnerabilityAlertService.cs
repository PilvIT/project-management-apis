using Core.Features.GitHub.ViewModels;
using Core.Models;

namespace Core.Features.VulnerabilityManagement;

public class VulnerabilityAlertService
{
    private readonly AppDbContext _dbContext;
    
    public VulnerabilityAlertService(AppDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task UpdateAsync(GitRepository repository, List<VulnerabilityNodeGraphQL> alerts)
    {
        IQueryable<VulnerabilityAlert> queryable = _dbContext.VulnerabilityAlerts
            .Where(a => a.RepositoryId == repository.Id);
        
        foreach (VulnerabilityNodeGraphQL alert in alerts)
        {
            var link = $"{repository.Url}/security/dependabot/{alert.Id}";
            
            VulnerabilityAlert? vulnerabilityAlert =
                queryable.SingleOrDefault(a => a.PackageName == alert.SecurityVulnerability.PackageName && a.DescriptionLink == link);

            if (vulnerabilityAlert == null)
            {
                IssueLog issue = CreateIssue(link, repository, alert);
                await _dbContext.IssueLogs.AddAsync(issue);
                VulnerabilityAlert alertInstance = CreateAlert(link, repository, alert);
                await _dbContext.VulnerabilityAlerts.AddAsync(alertInstance);
            }
        }
    }

    private IssueLog CreateIssue(string link, GitRepository repository, VulnerabilityNodeGraphQL alert)
    {
        return new IssueLog
        {
            Message = $"Vulnerable dependency '{alert.SecurityVulnerability.PackageName}' detected!",
            DetailLink = link,
            Level = IssueLog.LogLevel.WARN,
            CvssScore = alert.SecurityVulnerability.Advisory.CvssScore,
            RepositoryId = repository.Id,
            CreatedAt = DateTime.UtcNow
        };
    }

    private VulnerabilityAlert CreateAlert(string link, GitRepository repository, VulnerabilityNodeGraphQL alertNode)
    {
        SecurityVulnerabilityGraphQL vulnerability = alertNode.SecurityVulnerability;
        
        return new VulnerabilityAlert
        {
            PackageName = vulnerability.PackageName,
            Ecosystem = vulnerability.Ecosystem,
            DescriptionLink = link,
            VulnerableVersions = vulnerability.VulnerableVersionRange,
            PatchedVersion =vulnerability.FirstPatchedVersion,
            ManifestPath = alertNode.VulnerableManifestPath,
            CvssScore = vulnerability.Advisory.CvssScore,
            CreatedAt = alertNode.CreatedAt,
            RepositoryId = repository.Id,
        };
    }
}
