using Core.Features.GitHubApp.ApiModels;
using Core.Features.Projects.Models;
using Core.Features.VulnerabilityManagement.Models;

namespace Core.Features.VulnerabilityManagement;

public class VulnerabilityAlertService
{
    private readonly AppDbContext _dbContext;
    
    public VulnerabilityAlertService(AppDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public void BulkUpdate(GitRepository repository, List<VulnerabilityAlerts.Vulnerability> alerts)
    {
        IQueryable<VulnerabilityAlert> queryable = _dbContext.VulnerabilityAlerts
            .Where(a => a.RepositoryId == repository.Id);
        
        foreach (VulnerabilityAlerts.Vulnerability alert in alerts)
        {
            var detailLink = $"{repository.Url}/security/dependabot/{alert.Id}";
            
            VulnerabilityAlert? vulnerabilityAlert =
                queryable.SingleOrDefault(x => x.PackageName == alert.SecurityVulnerability.PackageName && x.DescriptionLink == detailLink);
            if (vulnerabilityAlert != null) continue;

            var iss = new IssueLog
            {
                Message = $"Vulnerable dependency '{alert.SecurityVulnerability.PackageName}' detected!",
                DetailLink = detailLink,
                Level = IssueLog.LogLevel.WARN,
                CvssScore = alert.SecurityVulnerability.Advisory.CvssScore,
                RepositoryId = repository.Id,
            };
            _dbContext.IssueLogs.Add(iss);
            _dbContext.SaveChanges();
            
            var x = new VulnerabilityAlert
            {
                PackageName = alert.SecurityVulnerability.PackageName,
                Ecosystem = alert.SecurityVulnerability.Ecosystem,
                DescriptionLink = detailLink,
                VulnerableVersions = alert.SecurityVulnerability.VulnerableVersionRange,
                PatchedVersion = alert.SecurityVulnerability.FirstPatchedVersion,
                ManifestPath = alert.VulnerableManifestPath,
                CvssScore = alert.SecurityVulnerability.Advisory.CvssScore,
                // TODO: IsTransitive = find from repository dependencies,
                CreatedAt = alert.CreatedAt,
                RepositoryId = repository.Id,
                IssueLogId = iss.Id
            };
            _dbContext.VulnerabilityAlerts.Add(x);
        }

        _dbContext.SaveChanges();
    }
}